{"compress":true,"commitItems":[["3fc86f43-a2a4-4385-a7a0-a6581ac75247",1520240170682,"# js\n> https://43.240.139.9 堡垒机地址\n\n### 1、Math数学运算\n* Math.cos Math.sin Math.tan Math.acos Math.asin Math.atan 数据的单位为弧度\n* `Math.PI / 180` 即可完成deg(角度) -> rad(弧度)\n* css 中`transform:rotate(30deg)`角度单位 deg rad\n* 一个数学问题，单独的cos值或者sin值是无法得到真实的角度（0-2PI）内的，需要sin和cos值\n\n### 2、Vue中的computed计算属性和watch\n> 计算属性会自动追踪依赖，只有当依赖值发生变化的时候，才会重新计算；\n> 我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n> Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 watch 回调。\n> js的数据类型分为两类：基本数据类型和对象\n\n对于赋值而言，基本数据类型进行值传递，而对象赋值则是引用传递；\n自动追踪依赖意味着，无法对计算属性做自定义配置，这时watch似乎更好些；Vue有自己的设定规则，这意味着有时Vue并不能满足你的所有需求，最好的方式就是，依照推荐的方式换一种实现思路；\n对于基本数据类型而言，值发生变化意味着 watch 和 依赖于此的computed都要重新计算\n对于对象，只有当对象引用发生变化的时候，依赖于此的 computed和watch 才会重新计算\n测试代码如下\n```\ndata() {\n  reutrn {\n    obj: { name: 'xxx', yy: 0}\n  }\n},\nwatch: {\n  obj(val) {\n    console.log('watch ', this.val);\n  }\n},\ncomputed: {\n  my() {\n  \tconsole.log('对my重新计算');\n    return this.obj.yy;\n  }\n},\nmethods: {\n  changeObj() {\n    // this.obj = { name: new Date().getTime() };\n    this.obj.name = new Date().getTime();\n  }\n},\nupdated() {\n  onsole.log('obj', JSON.stringify(this.obj));\n  console.log('my', JSON.stringify(this.my));\n},\ncreated() {\n  const _this = this;\nsetInterval(() => {\n  _this.changeObj();\n  }, 1000);\n}\n\n```\n### 3、touch事件\n当touchstart在很小的元素上触发时，即便touch移动到元素外，touchmove、touchend事件依旧会触发\n在VUE中动态设置样式，可以通过提供的`:style`或者`:class`扩展来实现，但是对于某些样式的获取和设置，比如`transform`直接通过DOM获取和设置时比较好的；\n补充：对于VUE所擅长的数据渲染完全可以放心的使用，但是对于DOM宽度高度计算而言（需要确定DOM的状态后才能计算）直接计算比较好；\n有两种设置样式的思路：\n* 1、`:style=\"{ width: `${offsetWidth}px`}\"`直接设置，受Vue影响比较严重，必须要考虑DOM是否加载的情况；\n* 2、拿到DOM的引用设置DOM，不受VUE的影响，代码可能会有庸余；\n\nDOM 中的值client(本身)，offset(偏移)，scroll(滚动)\n\n### 4、vuex 全局的数据中心，\n实现一个全局的单例，用来进行组件间的数据传递，控制数据的修改访问；vuex包含了全局数据的存储state、读取getter、修改setter；vuex中不应该包含大量的计算逻辑；计算逻辑应该由组件来做，或者getter来做\n使用vuex之前应该问的问题：\n为什么要用vuex？不用行吗？\n有什么数据需要放到vuex里面进行管理？好处坏处？\n我是不是把复杂的处理逻辑也放到vuex里面了？\n\n### 5、async JS异步处理（初步指导思路）\n* 单个异步处理使用 `promise`\n* 异步并发处理 `promise.all`\n* 顺序异步 使用 `async await`\n\n**Promise**\nPromise 中一旦执行了resolve或者reject，Promise本身的状态就会发生改变，并且不能再次改变；\nPromise 构造函数中的错误可以被其后的catch捕获到；\n以下情况不能捕获到，程序会在执行到`aaa * 1`就报错，并且不会调用then回调\n```\nnew Promise((resolve, reject) => {\n\tsetTimeout(() => {\n    \tresolve(aaa * 1);\n\t},1000);\n});\n```\n\n异常处理，异常分为两种：1、程序运行抛出的异常，如果异常未被捕获，程序运行终止\n2、用户自定义异常；通过`Error`类构造出的自定义异常；`const err = new Error('error')`程序不会报错，`Error`类和其他的类一样可以被调用和赋值；要想提示异常需要使用`throw err`;而这两类异常都是`Error`类的示例\n\n> throw语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个catch块。如果调用者函数中没有catch块，程序将会终止。\n\n>  try...catch语句将能引发错误的代码放在try块中，并且对应一个响应，然后有异常被抛出；catch能够捕获程序异常和自定义异常；\n\n```\nconst err = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n    \tresolve(new Error('errorrrrrr'));\n    }, 1000);\n});\nerr.then((res) => {\n\tconsole.log('then',res);\n}).catch((err) => {\n\tcosnole.log('catch',err)\n});\n// output\n// then Error: errorrrrrr\n    at setTimeout (<anonymous>:3:14)\n```\n\n### 6、正则表达式\n> .（小数点）匹配除换行符之外的任何单个字符。\n> [\\s\\S] [^] 能匹配包括 \\n 在内的所有字符\n\n\\S 非空白字符\n\\s 匹配空白字符 包括：空格、制表符、换页符和换行符；\n\n一下内容对应的字符，只是表明了位置，并不代表任何字符，也就是**零宽**\n\\b 匹配一个词的边界\n\\B 匹配一个非单词边界\n^ 字符开始\n$ 字符结尾\n\n肯定 positive lookahead (?=xx) 肯定，匹配列表中必须有xx,\n否定 negative lookahead (?!) 否定，匹配列表不能有xx\n```\nconst reg1 = /\\b\\d/g;\nconst reg2 = /\\b\\d(?=px)/g;\nconst reg3 = /\\b\\d(?!px)/g;\nconst str = '1px 2em 3pt 4px';\n\nconsole.log(str.match(reg1));// [ '1', '2', '3', '4' ]\nconsole.log(str.match(reg2));// [ '1', '4' ] 匹配一个数字，数字后面要有px，返回数字\nconsole.log(str.match(reg3));// [ '2', '3' ] 匹配一个数字，数字后面不能有px，返回数字\n\n```\n如一下表明要匹配三个连续相同的字符，并且后面没有三个连续相同的字符\n\\1 \\2 \\3 表示匹配到的字符组；\n\n```\nvar s = 'aaalllsss0tAAAnnn999';\nvar reg = /(\\w)\\1{2}(?!(\\w)\\2{2})/g;\n\nconsole.log(s.match(reg));// [ 'sss', '999' ]\n```\n最后一问：\n```\nvar web_development = \"python php ruby javascript jsonp perhapsphpisoutdated\";\n```\n\n找出其中 包含 p 但不包含 ph 的所有单词，即\n\n[ 'python', 'javascript', 'jsonp' ]\n\n引用一个大神的答案\n> https://stackoverflow.com/questions/39570875/find-all-words-that-contains-p-but-not-ph/39571868#39571868\n```\n\\b(?:p(?!h)|[^p\\s])*?p(?!h)(?:p(?!h)|[^p\\s])*?\\b\n```\n\n\n### 7、字符串的操作\n`str.substr(start,length)` 从指定位置获取指定长度的字符串\n`str.substring(start,end)` 返回开始和结束位置的字符串\n\n\n### 8、XHR对象的header\n> 浏览器不允许用户手动设置敏感的Http header\n包括但不限于\ncookie\nhost\nreferer\n\n因此 XHR请求中的host和referer是无法通过手动来设置的\n\n### 9、VUE js 源码学习\nhttp://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\n\n\n### 10、字符编码\n>  https://www.cnblogs.com/gavin-num1/p/5170247.html   很好的介绍性文章；\n\n计算机的符号有两种0,1；人类语言的符号则有很多，要想让语言符号能够在计算机系统之间传播必须要对字符进行编码；\n* ASCII 对英文字符进行了编码；用8bit两个字节byte表示了128个符号；\n* 为了能够在计算机中处理汉字，国家标准出台了GBK标准，兼容原有的ACSII并添加了独一无二的汉字，并编码了汉字对应的码集；（GBK GB2312 ...）\n* Unicode 编码，将世界上所有的符号都纳入其中，每一个符号都有一个独一无二的编码；它规定了符号的二进制代码；同样也是ASCII的超集；原有的ASCII不变\n* Unicode 编码是一个符号集，他只规定了符号的二进制代码，却没有规定这个二进制代码如何存储；\n\n\nutf-8是unicode 的一种实现；\n\njs中：escape 返回：返回一个字符的Unicode编码值；对应的解码为unescape\nencodeURI 返回内容的编码方式，decodeURI解码；不对“; / ? : @ & = + $ , #”英文 数字编码\nencodeURIComponent decodeURIComponent 对所有内容进行编码\n\nJavaScript的字符串本来就是unicode，即不存在utf-8的字符串，也不存在gb2312的字符串；（utf-8和GB312为了存储而实现的）\n\n``` js\nconst str = '你好 utf8';//\nconsole.log(escape(str));// 返回str的unicode编码\nconsole.log(encodeURI(str));// 返回中文的utf-8的编码（通常用于url上内容传递，因此要进行编码）\n```\n\nnode.js中的 描述二进制的对象，buffer是有文件格式的可以是 utf-8 也可以是 gbk的，因此在解码的时候需要对buffer进行解码，使用`iconv-lite`\n\nQ&A:\n- 1、js中的utf-8编码，这种说法对吗？\nans：不对，js中所有的代码都是unicode（前提示文件为utf-8格式）；utf-8或者gbk都是文件存储的方式；也就是说涉及到文件存储的时候才有编码方式这一说；存储也就是对原有的unicode码的在编码；\n- 2、js中涉及到文件编码的有哪些？\nans：直接读取文件时，服务器接受内容时，都是以流的方式进行存取，此时的流是有编码方式的；需要用正确的编码方式才能打开，否则的话就会出现乱码；\n- 3、乱码？\nans：要想正确的打开一个文件，必须知道文件的编码方式，用utf-8的方式去打开GBK文件肯定是乱码的\n\n### 11、js ES6+\n\n* 后续的ES新增内容为ES5的扩充，这也就意味着，老式的js程序仍然可以在新式的浏览器中运行，原有的js写法不会发生变化，ES+标准推荐使用新的方式去书写，以便能编写出更健壮的代码；同时也就意味新增的内容也是遵循原有的规范的；\n\n\n\n\n",[[1520240136533,["Administrator@PNIN6EWFA74MMDR",[[-1,4431," "],[1,4432," "],[-1,4482," "],[1,4483," "],[1,5729,"￥￥"]],[5729,5729],[5731,5731]]],[1520240137011,["Administrator@PNIN6EWFA74MMDR",[[-1,5729,"￥￥"]],[5731,5731],[5729,5729]]],[1520240137185,["Administrator@PNIN6EWFA74MMDR",[[-1,5731,"\n"]],[5729,5729],[5728,5728]]],[1520240138483,["Administrator@PNIN6EWFA74MMDR",[[1,5728,"###"]],[5728,5728],[5731,5731]]],[1520240139683,["Administrator@PNIN6EWFA74MMDR",[[1,5728,"\n"]],[5727,5727],[5728,5728]]],[1520240139918,["Administrator@PNIN6EWFA74MMDR",[[1,5729,"\n"]],[5728,5728],[5729,5729]]],[1520240147919,["Administrator@PNIN6EWFA74MMDR",[[1,5733," 12、valueOf toSting"]],[5733,5733],[5752,5752]]],[1520240148633,["Administrator@PNIN6EWFA74MMDR",[[-1,5749,"ing"]],[5752,5752],[5749,5749]]],[1520240149098,["Administrator@PNIN6EWFA74MMDR",[[1,5749,"t"]],[5749,5749],[5750,5750]]],[1520240149413,["Administrator@PNIN6EWFA74MMDR",[[-1,5749,"t"]],[5750,5750],[5749,5749]]],[1520240149932,["Administrator@PNIN6EWFA74MMDR",[[1,5749,"ring"]],[5749,5749],[5753,5753]]],[1520240154916,["Administrator@PNIN6EWFA74MMDR",[[1,5737,"duix"]],[5737,5737],[5741,5741]]],[1520240155680,["Administrator@PNIN6EWFA74MMDR",[[-1,5737,"duix"]],[5741,5741],[5737,5737]]],[1520240159475,["Administrator@PNIN6EWFA74MMDR",[[1,5737,"对象的"]],[5737,5737],[5740,5740]]],[1520240161663,["Administrator@PNIN6EWFA74MMDR",[[1,5756,"犯法"]],[5756,5756],[5758,5758]]],[1520240162263,["Administrator@PNIN6EWFA74MMDR",[[-1,5756,"犯法"]],[5758,5758],[5756,5756]]],[1520240163476,["Administrator@PNIN6EWFA74MMDR",[[1,5756,"方法"]],[5756,5756],[5758,5758]]],[1520240163757,["Administrator@PNIN6EWFA74MMDR",[[1,5761,"\n"]],[5758,5758],[5759,5759]]],[1520240164163,["Administrator@PNIN6EWFA74MMDR",[[1,5759,"对象的`valueOf`方法能够返回对象的**原始值**（primitive），默认情况下object的原始值是对象本身，对一些js中的核心对象，返回值又各有各的不同\n| 对象| 返回值 |\n|---|---|\n| Array | 返回数组对象本身。 |\n| Boolean| 布尔值。|\n| Date| 存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。（返回值类型为number）|\n| Function| 函数本身。 |\n| Number| 数字值|\n| Object| 对象本身。这是默认情况。 |\n| String| 字符串值。|\n|Math Error| Math 和 Error 对象没有 valueOf 方法。|\n\n**valueOf** 方法返回对象的原始值，不经常使用\n**toString**方法返回对象的字符串表示，在隐式类型转换中会用到\n```js\nvar obj = {\n  name: 'hello',\n  age: 12\n};\n\nobj.toString = function () {\n\tconsole.log('obj 调用了toSting方法');\n\treturn obj.name + obj.age;\n}\nvar str = '这是一个str';\n\nconsole.log(str + obj);// 这是一个strhello12，调用了toString方法\n\nobj = {};\n\nconsole.log(str + obj);// 这是一个str[object Object]，默认toString返回'[object Object]'\n```"]],[5759,5759],[6465,6465]]]]],["99b07966-43fe-4662-8c6e-d29a73e6c826",1520315317563,"# js\n> https://43.240.139.9 堡垒机地址\n\n### 1、Math数学运算\n* Math.cos Math.sin Math.tan Math.acos Math.asin Math.atan 数据的单位为弧度\n* `Math.PI / 180` 即可完成deg(角度) -> rad(弧度)\n* css 中`transform:rotate(30deg)`角度单位 deg rad\n* 一个数学问题，单独的cos值或者sin值是无法得到真实的角度（0-2PI）内的，需要sin和cos值\n\n### 2、Vue中的computed计算属性和watch\n> 计算属性会自动追踪依赖，只有当依赖值发生变化的时候，才会重新计算；\n> 我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n> Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 watch 回调。\n> js的数据类型分为两类：基本数据类型和对象\n\n对于赋值而言，基本数据类型进行值传递，而对象赋值则是引用传递；\n自动追踪依赖意味着，无法对计算属性做自定义配置，这时watch似乎更好些；Vue有自己的设定规则，这意味着有时Vue并不能满足你的所有需求，最好的方式就是，依照推荐的方式换一种实现思路；\n对于基本数据类型而言，值发生变化意味着 watch 和 依赖于此的computed都要重新计算\n对于对象，只有当对象引用发生变化的时候，依赖于此的 computed和watch 才会重新计算\n测试代码如下\n```\ndata() {\n  reutrn {\n    obj: { name: 'xxx', yy: 0}\n  }\n},\nwatch: {\n  obj(val) {\n    console.log('watch ', this.val);\n  }\n},\ncomputed: {\n  my() {\n  \tconsole.log('对my重新计算');\n    return this.obj.yy;\n  }\n},\nmethods: {\n  changeObj() {\n    // this.obj = { name: new Date().getTime() };\n    this.obj.name = new Date().getTime();\n  }\n},\nupdated() {\n  onsole.log('obj', JSON.stringify(this.obj));\n  console.log('my', JSON.stringify(this.my));\n},\ncreated() {\n  const _this = this;\nsetInterval(() => {\n  _this.changeObj();\n  }, 1000);\n}\n\n```\n### 3、touch事件\n当touchstart在很小的元素上触发时，即便touch移动到元素外，touchmove、touchend事件依旧会触发\n在VUE中动态设置样式，可以通过提供的`:style`或者`:class`扩展来实现，但是对于某些样式的获取和设置，比如`transform`直接通过DOM获取和设置时比较好的；\n补充：对于VUE所擅长的数据渲染完全可以放心的使用，但是对于DOM宽度高度计算而言（需要确定DOM的状态后才能计算）直接计算比较好；\n有两种设置样式的思路：\n* 1、`:style=\"{ width: `${offsetWidth}px`}\"`直接设置，受Vue影响比较严重，必须要考虑DOM是否加载的情况；\n* 2、拿到DOM的引用设置DOM，不受VUE的影响，代码可能会有庸余；\n\nDOM 中的值client(本身)，offset(偏移)，scroll(滚动)\n\n### 4、vuex 全局的数据中心，\n实现一个全局的单例，用来进行组件间的数据传递，控制数据的修改访问；vuex包含了全局数据的存储state、读取getter、修改setter；vuex中不应该包含大量的计算逻辑；计算逻辑应该由组件来做，或者getter来做\n使用vuex之前应该问的问题：\n为什么要用vuex？不用行吗？\n有什么数据需要放到vuex里面进行管理？好处坏处？\n我是不是把复杂的处理逻辑也放到vuex里面了？\n\n### 5、async JS异步处理（初步指导思路）\n* 单个异步处理使用 `promise`\n* 异步并发处理 `promise.all`\n* 顺序异步 使用 `async await`\n\n**Promise**\nPromise 中一旦执行了resolve或者reject，Promise本身的状态就会发生改变，并且不能再次改变；\nPromise 构造函数中的错误可以被其后的catch捕获到；\n以下情况不能捕获到，程序会在执行到`aaa * 1`就报错，并且不会调用then回调\n```\nnew Promise((resolve, reject) => {\n\tsetTimeout(() => {\n    \tresolve(aaa * 1);\n\t},1000);\n});\n```\n\n异常处理，异常分为两种：1、程序运行抛出的异常，如果异常未被捕获，程序运行终止\n2、用户自定义异常；通过`Error`类构造出的自定义异常；`const err = new Error('error')`程序不会报错，`Error`类和其他的类一样可以被调用和赋值；要想提示异常需要使用`throw err`;而这两类异常都是`Error`类的示例\n\n> throw语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个catch块。如果调用者函数中没有catch块，程序将会终止。\n\n>  try...catch语句将能引发错误的代码放在try块中，并且对应一个响应，然后有异常被抛出；catch能够捕获程序异常和自定义异常；\n\n```\nconst err = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n    \tresolve(new Error('errorrrrrr'));\n    }, 1000);\n});\nerr.then((res) => {\n\tconsole.log('then',res);\n}).catch((err) => {\n\tcosnole.log('catch',err)\n});\n// output\n// then Error: errorrrrrr\n    at setTimeout (<anonymous>:3:14)\n```\n\n### 6、正则表达式\n> .（小数点）匹配除换行符之外的任何单个字符。\n> [\\s\\S] [^] 能匹配包括 \\n 在内的所有字符\n\n\\S 非空白字符\n\\s 匹配空白字符 包括：空格、制表符、换页符和换行符；\n\n一下内容对应的字符，只是表明了位置，并不代表任何字符，也就是**零宽**\n\\b 匹配一个词的边界\n\\B 匹配一个非单词边界\n^ 字符开始\n$ 字符结尾\n\n肯定 positive lookahead (?=xx) 肯定，匹配列表中必须有xx,\n否定 negative lookahead (?!) 否定，匹配列表不能有xx\n```\nconst reg1 = /\\b\\d/g;\nconst reg2 = /\\b\\d(?=px)/g;\nconst reg3 = /\\b\\d(?!px)/g;\nconst str = '1px 2em 3pt 4px';\n\nconsole.log(str.match(reg1));// [ '1', '2', '3', '4' ]\nconsole.log(str.match(reg2));// [ '1', '4' ] 匹配一个数字，数字后面要有px，返回数字\nconsole.log(str.match(reg3));// [ '2', '3' ] 匹配一个数字，数字后面不能有px，返回数字\n\n```\n如一下表明要匹配三个连续相同的字符，并且后面没有三个连续相同的字符\n\\1 \\2 \\3 表示匹配到的字符组；\n\n```\nvar s = 'aaalllsss0tAAAnnn999';\nvar reg = /(\\w)\\1{2}(?!(\\w)\\2{2})/g;\n\nconsole.log(s.match(reg));// [ 'sss', '999' ]\n```\n最后一问：\n```\nvar web_development = \"python php ruby javascript jsonp perhapsphpisoutdated\";\n```\n\n找出其中 包含 p 但不包含 ph 的所有单词，即\n\n[ 'python', 'javascript', 'jsonp' ]\n\n引用一个大神的答案\n> https://stackoverflow.com/questions/39570875/find-all-words-that-contains-p-but-not-ph/39571868#39571868\n```\n\\b(?:p(?!h)|[^p\\s])*?p(?!h)(?:p(?!h)|[^p\\s])*?\\b\n```\n\n\n### 7、字符串的操作\n`str.substr(start,length)` 从指定位置获取指定长度的字符串\n`str.substring(start,end)` 返回开始和结束位置的字符串\n\n\n### 8、XHR对象的header\n> 浏览器不允许用户手动设置敏感的Http header\n包括但不限于\ncookie\nhost\nreferer\n\n因此 XHR请求中的host和referer是无法通过手动来设置的\n\n### 9、VUE js 源码学习\nhttp://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\n\n\n### 10、字符编码\n>  https://www.cnblogs.com/gavin-num1/p/5170247.html   很好的介绍性文章；\n\n计算机的符号有两种0,1；人类语言的符号则有很多，要想让语言符号能够在计算机系统之间传播必须要对字符进行编码；\n* ASCII 对英文字符进行了编码；用8bit两个字节byte表示了128个符号；\n* 为了能够在计算机中处理汉字，国家标准出台了GBK标准，兼容原有的ACSII并添加了独一无二的汉字，并编码了汉字对应的码集；（GBK GB2312 ...）\n* Unicode 编码，将世界上所有的符号都纳入其中，每一个符号都有一个独一无二的编码；它规定了符号的二进制代码；同样也是ASCII的超集；原有的ASCII不变\n* Unicode 编码是一个符号集，他只规定了符号的二进制代码，却没有规定这个二进制代码如何存储；\n\n\nutf-8是unicode 的一种实现；\n\njs中：escape 返回：返回一个字符的Unicode编码值；对应的解码为unescape\nencodeURI 返回内容的编码方式，decodeURI解码；不对“; / ? : @ & = + $ , #”英文 数字编码\nencodeURIComponent decodeURIComponent 对所有内容进行编码\n\nJavaScript的字符串本来就是unicode，即不存在utf-8的字符串，也不存在gb2312的字符串；（utf-8和GB312为了存储而实现的）\n\n``` js\nconst str = '你好 utf8';//\nconsole.log(escape(str));// 返回str的unicode编码\nconsole.log(encodeURI(str));// 返回中文的utf-8的编码（通常用于url上内容传递，因此要进行编码）\n```\n\nnode.js中的 描述二进制的对象，buffer是有文件格式的可以是 utf-8 也可以是 gbk的，因此在解码的时候需要对buffer进行解码，使用`iconv-lite`\n\nQ&A:\n- 1、js中的utf-8编码，这种说法对吗？\nans：不对，js中所有的代码都是unicode（前提示文件为utf-8格式）；utf-8或者gbk都是文件存储的方式；也就是说涉及到文件存储的时候才有编码方式这一说；存储也就是对原有的unicode码的在编码；\n- 2、js中涉及到文件编码的有哪些？\nans：直接读取文件时，服务器接受内容时，都是以流的方式进行存取，此时的流是有编码方式的；需要用正确的编码方式才能打开，否则的话就会出现乱码；\n- 3、乱码？\nans：要想正确的打开一个文件，必须知道文件的编码方式，用utf-8的方式去打开GBK文件肯定是乱码的\n\n### 11、js ES6+\n\n* 后续的ES新增内容为ES5的扩充，这也就意味着，老式的js程序仍然可以在新式的浏览器中运行，原有的js写法不会发生变化，ES+标准推荐使用新的方式去书写，以便能编写出更健壮的代码；同时也就意味新增的内容也是遵循原有的规范的；\n\n\n### 12、对象的valueOf toString方法\n对象的`valueOf`方法能够返回对象的**原始值**（primitive），默认情况下object的原始值是对象本身，对一些js中的核心对象，返回值又各有各的不同\n| 对象| 返回值 |\n|---|---|\n| Array | 返回数组对象本身。 |\n| Boolean| 布尔值。|\n| Date| 存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。（返回值类型为number）|\n| Function| 函数本身。 |\n| Number| 数字值|\n| Object| 对象本身。这是默认情况。 |\n| String| 字符串值。|\n|Math Error| Math 和 Error 对象没有 valueOf 方法。|\n\n**valueOf** 方法返回对象的原始值，不经常使用\n**toString**方法返回对象的字符串表示，在隐式类型转换中会用到\n```js\nvar obj = {\n  name: 'hello',\n  age: 12\n};\n\nobj.toString = function () {\n\tconsole.log('obj 调用了toSting方法');\n\treturn obj.name + obj.age;\n}\nvar str = '这是一个str';\n\nconsole.log(str + obj);// 这是一个strhello12，调用了toString方法\n\nobj = {};\n\nconsole.log(str + obj);// 这是一个str[object Object]，默认toString返回'[object Object]'\n```\n### 13、javascript 中的复制\njs中的函数（用标准、可靠的方法）真正地复制，所以你只能复制对共享函数对象的引用；\n其他内容则可以通过`JSON.parse(JSON.stringify())`所以应当尽量避免复制操作的设计；\n一定要注意，只在能够提高代码可读性的前提下使用显式混入，避免使用增加代码理解难、度或者让对象关系更加复杂的模式。\njs中使用prototype原型的方式实现类和继承\n\n**Prototype** 原型继承\n**`for in`**使用 for..in 遍历对象时原理和查找 [[Prototype]] 链类似，任何可以通过原型链访问到（并且是 enumerable ，参见第 3 章）的属性都会被枚举。**`in`**使用 in 操作符来检查属性在对象中是否存在时，同样会查找对象的整条原型链（无论属性是否可枚举）：\n* 对于从对象上获取属性来说，`obj.name`会触发原型链的查询，否则会返回`undefined`\n* 对于从对象上设置属性来说，若原型链上存在该属性，赋值时会有不同（根据不同的情况进行赋值）\n\n\n```js\nvar obj = {};\nobj.a = 5;\nvar inhertObj = Object.create(obj);\n\ninhertObj.a ++;// inhertObj.a = inhertObj.a + 1;\n\nconsole.log(inhertObj.a);// 6\nconsole.log(obj.a);// 5\n```\n注意在执行以上操作时产生的隐式委托\nJavascript和面向类的语言不同，它并没有类来作为对象的抽象模式或这蓝图；实际上，JavaScript 才是真正应该被称为“面向对象”的语言，因为它是少有的可以不通过类，直接创建对象的语言。\n**JavaScript 中只有对象**\n\n> Javascript中通过原型继承，来实现对象的继承，通常这是动态语言版本的类继承；和通常面向对象的语言的类继承*几乎是完全相反的*行为；\n> 继承意味着复制操作，JavaScript（默认）并不会复制对象属性。相反，JavaScript 会在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。委托（参见第 6 章）这个术语可以更加准确地描述 JavaScript 中对象的关联机制。\n\n\n",[[1520315316143,["Administrator@PNIN6EWFA74MMDR",[[1,7474,"\n"]],[7471,7471],[7472,7472]]],[1520315316594,["Administrator@PNIN6EWFA74MMDR",[[1,7475,"\n"]],[7472,7472],[7473,7473]]],[1520322867240,["Administrator@PNIN6EWFA74MMDR",[[1,7473,"委托行为意味着某些对象（ XYZ ）在找不到属性或者方法引用时会把这个请求委托给另一\r\n个对象（ Task ）。\r\n这是一种极其强大的设计模式，和父类、子类、继承、多态等概念完全不同。在你的脑海中\r\n对象并不是按照父类到子类的关系垂直组织的，而是通过任意方向的委托关联并排组织的。"]],[7473,7473],[7613,7613]]],[1520322875273,["Administrator@PNIN6EWFA74MMDR",[[-1,7515,"\r\n"],[-1,7529,"\r"],[-1,7571,"\r"]],[7515,7515],[7515,7515]]],[1520322878050,["Administrator@PNIN6EWFA74MMDR",[[-1,7568,"\n"]],[7568,7568],[7568,7568]]],[1520322880189,["Administrator@PNIN6EWFA74MMDR",[[1,7473,"\n"]],[7472,7472],[7473,7473]]],[1520322892567,["Administrator@PNIN6EWFA74MMDR",[[1,7473,"javacript 使用委托模式"]],[7473,7473],[7489,7489]]],[1520322898424,["Administrator@PNIN6EWFA74MMDR",[[-1,7487,"模式"]],[7489,7489],[7487,7487]]],[1520322929767,["Administrator@PNIN6EWFA74MMDR",[[1,7487,"设计模式，实现继承。而不是通过类的设计模式"]],[7487,7487],[7508,7508]]],[1520325258418,["Administrator@PNIN6EWFA74MMDR",[[1,7647,"\n"]],[7645,7645],[7646,7646]]],[1520325261514,["Administrator@PNIN6EWFA74MMDR",[[1,7646,"jst"]],[7646,7646],[7649,7649]]],[1520325262165,["Administrator@PNIN6EWFA74MMDR",[[-1,7647,"st"]],[7649,7649],[7647,7647]]],[1520325270025,["Administrator@PNIN6EWFA74MMDR",[[1,7647,"s委托继承"]],[7647,7647],[7652,7652]]],[1520325270508,["Administrator@PNIN6EWFA74MMDR",[[1,7654,"\n"]],[7652,7652],[7653,7653]]],[1520325272755,["Administrator@PNIN6EWFA74MMDR",[[1,7653,"![]"]],[7653,7653],[7656,7656]]],[1520325276490,["Administrator@PNIN6EWFA74MMDR",[[1,7655,"prototypee"]],[7655,7655],[7665,7665]]],[1520325276925,["Administrator@PNIN6EWFA74MMDR",[[-1,7664,"e"]],[7665,7665],[7664,7664]]],[1520325278092,["Administrator@PNIN6EWFA74MMDR",[[1,7664,"-et"]],[7664,7664],[7667,7667]]],[1520325278547,["Administrator@PNIN6EWFA74MMDR",[[-1,7666,"t"]],[7667,7667],[7666,7666]]],[1520325279000,["Administrator@PNIN6EWFA74MMDR",[[1,7666,"xe"]],[7666,7666],[7668,7668]]],[1520325279727,["Administrator@PNIN6EWFA74MMDR",[[-1,7667,"e"]],[7668,7668],[7667,7667]]],[1520325280362,["Administrator@PNIN6EWFA74MMDR",[[1,7667,"tend"]],[7667,7667],[7671,7671]]],[1520325281561,["Administrator@PNIN6EWFA74MMDR",[[1,7672,"()"]],[7672,7672],[7674,7674]]],[1520325284168,["Administrator@PNIN6EWFA74MMDR",[[1,7673,"./prototype-extend.png"]],[7673,7673],[7695,7695]]],[1520325289206,["Administrator@PNIN6EWFA74MMDR",[[1,7675,"/"]],[7675,7675],[7676,7676]]],[1520325290541,["Administrator@PNIN6EWFA74MMDR",[[1,7675,"imgs"]],[7675,7675],[7679,7679]]],[1520325293567,["Administrator@PNIN6EWFA74MMDR",[[1,7653,"\n"]],[7652,7652],[7653,7653]]],[1520325306492,["Administrator@PNIN6EWFA74MMDR",[[1,7653,"bv"]],[7653,7653],[7655,7655]]],[1520325306852,["Administrator@PNIN6EWFA74MMDR",[[-1,7654,"v"]],[7655,7655],[7654,7654]]],[1520325309811,["Administrator@PNIN6EWFA74MMDR",[[1,7654,"1 b2wei "]],[7654,7654],[7662,7662]]],[1520325310381,["Administrator@PNIN6EWFA74MMDR",[[-1,7658,"wei "]],[7662,7662],[7658,7658]]],[1520325311280,["Administrator@PNIN6EWFA74MMDR",[[1,7658,"位"]],[7658,7658],[7659,7659]]],[1520325313560,["Administrator@PNIN6EWFA74MMDR",[[-1,7658,"位"]],[7659,7659],[7658,7658]]],[1520325313894,["Administrator@PNIN6EWFA74MMDR",[[1,7658,"wi"]],[7658,7658],[7660,7660]]],[1520325314469,["Administrator@PNIN6EWFA74MMDR",[[-1,7658,"wi"]],[7660,7660],[7658,7658]]],[1520325330320,["Administrator@PNIN6EWFA74MMDR",[[1,7658,"为Bar的实例，Bar继承自Foo,F"]],[7658,7658],[7677,7677]]],[1520325331451,["Administrator@PNIN6EWFA74MMDR",[[-1,7675,",F"]],[7677,7677],[7675,7675]]],[1520325331885,["Administrator@PNIN6EWFA74MMDR",[[1,7675,"，。"]],[7675,7675],[7677,7677]]],[1520325332754,["Administrator@PNIN6EWFA74MMDR",[[-1,7676,"。"]],[7677,7677],[7676,7676]]],[1520325347677,["Administrator@PNIN6EWFA74MMDR",[[1,7676,"Foo继承自Object，===>Bar。"]],[7676,7676],[7697,7697]]],[1520325348288,["Administrator@PNIN6EWFA74MMDR",[[-1,7696,"。"]],[7697,7697],[7696,7696]]],[1520325353752,["Administrator@PNIN6EWFA74MMDR",[[1,7696,".prototype.__proto__"]],[7696,7696],[7716,7716]]],[1520325357167,["Administrator@PNIN6EWFA74MMDR",[[1,7716," ==="]],[7716,7716],[7720,7720]]],[1520325359780,["Administrator@PNIN6EWFA74MMDR",[[1,7693,"\n"]],[7693,7693],[7694,7694]]],[1520325360927,["Administrator@PNIN6EWFA74MMDR",[[1,7694,"`"]],[7694,7694],[7695,7695]]],[1520325361888,["Administrator@PNIN6EWFA74MMDR",[[1,7722,"`"]],[7722,7722],[7723,7723]]],[1520325368156,["Administrator@PNIN6EWFA74MMDR",[[1,7722," Foo.prototp"]],[7722,7722],[7734,7734]]],[1520325368925,["Administrator@PNIN6EWFA74MMDR",[[-1,7733,"p"]],[7734,7734],[7733,7733]]],[1520325370625,["Administrator@PNIN6EWFA74MMDR",[[1,7733,"ype"]],[7733,7733],[7736,7736]]],[1520325371674,["Administrator@PNIN6EWFA74MMDR",[[1,7738,"\n"]],[7737,7737],[7738,7738]]],[1520325372767,["Administrator@PNIN6EWFA74MMDR",[[1,7738,"``"]],[7738,7738],[7740,7740]]],[1520325380757,["Administrator@PNIN6EWFA74MMDR",[[1,7739,"Foo.prototype。————"]],[7739,7739],[7757,7757]]],[1520325382117,["Administrator@PNIN6EWFA74MMDR",[[-1,7752,"。————"]],[7757,7757],[7752,7752]]],[1520325390225,["Administrator@PNIN6EWFA74MMDR",[[1,7752,".__proto__ === Object/"]],[7752,7752],[7774,7774]]],[1520325390680,["Administrator@PNIN6EWFA74MMDR",[[-1,7773,"/"]],[7774,7774],[7773,7773]]],[1520325394411,["Administrator@PNIN6EWFA74MMDR",[[1,7773,".Proto"]],[7773,7773],[7779,7779]]],[1520325395720,["Administrator@PNIN6EWFA74MMDR",[[-1,7774,"Proto"]],[7779,7779],[7774,7774]]],[1520325398005,["Administrator@PNIN6EWFA74MMDR",[[1,7774,"prototype"]],[7774,7774],[7783,7783]]],[1520328403319,["Administrator@PNIN6EWFA74MMDR",[[1,7835,"\n"]],[7834,7834],[7835,7835]]],[1520328403473,["Administrator@PNIN6EWFA74MMDR",[[1,7836,"\n"]],[7835,7835],[7836,7836]]],[1520328403657,["Administrator@PNIN6EWFA74MMDR",[[1,7837,"\n"]],[7836,7836],[7837,7837]]],[1520328404103,["Administrator@PNIN6EWFA74MMDR",[[1,7837,"* 过程式代码 简单 易懂 流程清晰明了 ----- 维护不方便\n\n* 面向对象式 复杂 抽象 ---- 易于维护和扩展"]],[7837,7837],[7897,7897]]],[1520329709699,["Administrator@PNIN6EWFA74MMDR",[[1,7898,"\n"]],[7897,7897],[7898,7898]]],[1520329709823,["Administrator@PNIN6EWFA74MMDR",[[1,7899,"\n"]],[7898,7898],[7899,7899]]],[1520329710764,["Administrator@PNIN6EWFA74MMDR",[[1,7899,"在软件架构中你可以选择是否使用类和继承设计模式。大多数开发者理所当然地认为类是\r\n唯一（合适）的代码组织方式，但是本章中我们看到了另一种更少见但是更强大的设计模\r\n188 ｜ 第 6 章\r\n式：行为委托。"]],[7899,7899],[8001,8001]]],[1520329714289,["Administrator@PNIN6EWFA74MMDR",[[-1,7938,"\r"],[-1,7979,"\r"],[-1,7981,"188 ｜ 第 6 章\r"]],[7979,7990],[7979,7979]]],[1520329714918,["Administrator@PNIN6EWFA74MMDR",[[-1,7979,"\n"]],[7979,7979],[7979,7979]]],[1520329716515,["Administrator@PNIN6EWFA74MMDR",[[-1,7938,"\n"]],[7938,7938],[7938,7938]]],[1520329717236,["Administrator@PNIN6EWFA74MMDR",[[-1,7977,"\n"]],[7977,7977],[7977,7977]]],[1520329718221,["Administrator@PNIN6EWFA74MMDR",[[1,7985,"\n"]],[7984,7984],[7985,7985]]],[1520329720680,["Administrator@PNIN6EWFA74MMDR",[[1,7899,"\n"]],[7898,7898],[7899,7899]]],[1520329723284,["Administrator@PNIN6EWFA74MMDR",[[1,7899,"****"]],[7899,7899],[7903,7903]]],[1520329728855,["Administrator@PNIN6EWFA74MMDR",[[1,7901,"中介"]],[7901,7901],[7903,7903]]],[1520329729437,["Administrator@PNIN6EWFA74MMDR",[[-1,7901,"中介"]],[7903,7903],[7901,7901]]],[1520329730572,["Administrator@PNIN6EWFA74MMDR",[[1,7901,"总结"]],[7901,7901],[7903,7903]]],[1520329736060,["Administrator@PNIN6EWFA74MMDR",[[1,7992,"行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的\r\n[[Prototype]] 机制本质上就是行为委托机制。也就是说，我们可以选择在 JavaScript 中努\r\n力实现类机制（参见第 4 和第 5 章），也可以拥抱更自然的 [[Prototype]] 委托机制。"]],[7992,7992],[8145,8145]]],[1520329738209,["Administrator@PNIN6EWFA74MMDR",[[-1,8037,"\r\n"],[-1,8093,"\r"]],[8037,8037],[8037,8037]]],[1520329739006,["Administrator@PNIN6EWFA74MMDR",[[-1,8091,"\n"]],[8091,8091],[8091,8091]]],[1520329739832,["Administrator@PNIN6EWFA74MMDR",[[1,8142,"\n"]],[8141,8141],[8142,8142]]],[1520329744790,["Administrator@PNIN6EWFA74MMDR",[[1,7992,"\n"]],[7991,7991],[7992,7992]]],[1520329746121,["Administrator@PNIN6EWFA74MMDR",[[1,8110,"\n"]],[8110,8110],[8111,8111]]],[1520329753054,["Administrator@PNIN6EWFA74MMDR",[[1,8145,"\n"]],[8144,8144],[8145,8145]]],[1520329753330,["Administrator@PNIN6EWFA74MMDR",[[1,8145,"当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。"]],[8145,8145],[8184,8184]]],[1520329753858,["Administrator@PNIN6EWFA74MMDR",[[1,8185,"\n"]],[8184,8184],[8185,8185]]],[1520329754995,["Administrator@PNIN6EWFA74MMDR",[[1,8186,"\n"]],[8185,8185],[8186,8186]]],[1520329759390,["Administrator@PNIN6EWFA74MMDR",[[1,8186,"对象关联（对象之前互相关联）是一种编码风格，它倡导的是直接创建和关联对象，不把\r\n它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现。"]],[8186,8186],[8271,8271]]],[1520329764661,[null,[[-1,8225,"\r"]],[8225,8225],[8225,8225]]],[1520329764661,[null,[[1,8225,"\r"]],[8225,8225],[8225,8225]]],[1520329763941,["Administrator@PNIN6EWFA74MMDR",[[-1,8225,"\r\n"]],[8225,8225],[8225,8225]]],[1520329883345,["Administrator@PNIN6EWFA74MMDR",[[1,7906,"\n"]],[7905,7905],[7906,7906]]],[1520329883486,["Administrator@PNIN6EWFA74MMDR",[[1,7907,"\n"]],[7906,7906],[7907,7907]]],[1520329883588,["Administrator@PNIN6EWFA74MMDR",[[1,7908,"\n"]],[7907,7907],[7908,7908]]],[1520329885246,["Administrator@PNIN6EWFA74MMDR",[[1,7909,"\n"]],[7906,7906],[7907,7907]]],[1520329885516,["Administrator@PNIN6EWFA74MMDR",[[1,7907,"这\r\n种模式被称为“鸭子类型”。这个术语源自这句格言“如果看起来像鸭子，叫起来像鸭子，\r\n那就一定是鸭子。”"]],[7907,7907],[7961,7961]]],[1520329887228,["Administrator@PNIN6EWFA74MMDR",[[-1,7908,"\r\n"],[-1,7950,"\r"]],[7908,7908],[7908,7908]]],[1520329888540,["Administrator@PNIN6EWFA74MMDR",[[-1,7948,"\n"]],[7948,7948],[7948,7948]]],[1520330064003,["Administrator@PNIN6EWFA74MMDR",[[1,7960,"\n"]],[7957,7957],[7958,7958]]],[1520330065428,["Administrator@PNIN6EWFA74MMDR",[[1,7958,"````"]],[7958,7958],[7962,7962]]],[1520330065896,["Administrator@PNIN6EWFA74MMDR",[[1,7965,"\n"]],[7962,7962],[7963,7963]]],[1520330066926,["Administrator@PNIN6EWFA74MMDR",[[1,7963,"```"]],[7963,7963],[7966,7966]]],[1520330068302,["Administrator@PNIN6EWFA74MMDR",[[-1,7961,"`"]],[7961,7961],[7961,7961]]],[1520330069037,["Administrator@PNIN6EWFA74MMDR",[[1,7961,"js"]],[7961,7961],[7963,7963]]],[1520330069169,["Administrator@PNIN6EWFA74MMDR",[[1,7964,"\n"]],[7963,7963],[7964,7964]]],[1520330070384,["Administrator@PNIN6EWFA74MMDR",[[1,7965,"\n"]],[7964,7964],[7965,7965]]],[1520330074585,["Administrator@PNIN6EWFA74MMDR",[[1,7964,"var obj1 = {}"]],[7964,7964],[7977,7977]]],[1520330075151,["Administrator@PNIN6EWFA74MMDR",[[1,7979,"\n"]],[7977,7977],[7978,7978]]],[1520330075975,["Administrator@PNIN6EWFA74MMDR",[[1,7978,"var "]],[7978,7978],[7982,7982]]],[1520330077251,["Administrator@PNIN6EWFA74MMDR",[[1,7977,";"]],[7977,7977],[7978,7978]]],[1520330081218,["Administrator@PNIN6EWFA74MMDR",[[1,7983,"fn1 = function "]],[7983,7983],[7998,7998]]],[1520330081866,["Administrator@PNIN6EWFA74MMDR",[[-1,7997," "]],[7998,7998],[7997,7997]]],[1520330082658,["Administrator@PNIN6EWFA74MMDR",[[1,7997," （）"]],[7997,7997],[8000,8000]]],[1520330084119,["Administrator@PNIN6EWFA74MMDR",[[-1,7997," （）"]],[8000,8000],[7997,7997]]],[1520330085165,["Administrator@PNIN6EWFA74MMDR",[[1,7997," （）"]],[7997,7997],[8000,8000]]],[1520330086013,["Administrator@PNIN6EWFA74MMDR",[[-1,7998,"（）"]],[8000,8000],[7998,7998]]],[1520330087822,["Administrator@PNIN6EWFA74MMDR",[[1,7998,"() {}"]],[7998,7998],[8003,8003]]],[1520330088298,["Administrator@PNIN6EWFA74MMDR",[[1,8005,"\n"]],[8003,8003],[8004,8004]]],[1520330088960,["Administrator@PNIN6EWFA74MMDR",[[1,8006,"\n"]],[8004,8004],[8005,8005]]],[1520330097149,["Administrator@PNIN6EWFA74MMDR",[[1,8005,"obj1 instanceOf fn1;//"]],[8005,8005],[8027,8027]]],[1520330113297,["Administrator@PNIN6EWFA74MMDR",[[-1,8018,"O"]],[8019,8019],[8018,8018]]],[1520330113768,["Administrator@PNIN6EWFA74MMDR",[[1,8018,"o"]],[8018,8018],[8019,8019]]],[1520330131265,["Administrator@PNIN6EWFA74MMDR",[[1,8027," false"]],[8027,8027],[8033,8033]]],[1520330131813,["Administrator@PNIN6EWFA74MMDR",[[1,8035,"\n"]],[8033,8033],[8034,8034]]],[1520330155229,["Administrator@PNIN6EWFA74MMDR",[[1,8034,"obj1.__proto__ === fn1.prototype;// false"]],[8034,8034],[8075,8075]]],[1520330155795,["Administrator@PNIN6EWFA74MMDR",[[1,8077,"\n"]],[8075,8075],[8076,8076]]],[1520330170568,["Administrator@PNIN6EWFA74MMDR",[[1,8076,"obj1.__proto__ = fn1.prototype;"]],[8076,8076],[8107,8107]]],[1520330171139,["Administrator@PNIN6EWFA74MMDR",[[1,8109,"\n"]],[8107,8107],[8108,8108]]],[1520330174175,["Administrator@PNIN6EWFA74MMDR",[[1,8109,"obj1 instanceof fn1;// false"]],[8109,8109],[8137,8137]]],[1520330177250,["Administrator@PNIN6EWFA74MMDR",[[-1,8132,"false"]],[8137,8137],[8132,8132]]],[1520330178124,["Administrator@PNIN6EWFA74MMDR",[[1,8132,"true"]],[8132,8132],[8136,8136]]],[1520330232893,["Administrator@PNIN6EWFA74MMDR",[[1,8137,"\n"]],[8136,8136],[8137,8137]]],[1520330233073,["Administrator@PNIN6EWFA74MMDR",[[1,8138,"\n"]],[8137,8137],[8138,8138]]],[1520330238644,["Administrator@PNIN6EWFA74MMDR",[[1,8138,"// 可以使用"]],[8138,8138],[8145,8145]]],[1520330255646,["Administrator@PNIN6EWFA74MMDR",[[1,8145," isPropertyOf  Object。"]],[8145,8145],[8167,8167]]],[1520330256435,["Administrator@PNIN6EWFA74MMDR",[[-1,8166,"。"]],[8167,8167],[8166,8166]]],[1520330259379,["Administrator@PNIN6EWFA74MMDR",[[1,8166,".getPropetr"]],[8166,8166],[8177,8177]]],[1520330259944,["Administrator@PNIN6EWFA74MMDR",[[-1,8176,"r"]],[8177,8177],[8176,8176]]],[1520330260557,["Administrator@PNIN6EWFA74MMDR",[[1,8176,"t"]],[8176,8176],[8177,8177]]],[1520330261273,["Administrator@PNIN6EWFA74MMDR",[[-1,8175,"tt"]],[8177,8177],[8175,8175]]],[1520330264693,["Administrator@PNIN6EWFA74MMDR",[[1,8175,"rtyOf()"]],[8175,8175],[8182,8182]]],[1520330269710,["Administrator@PNIN6EWFA74MMDR",[[1,8182," l"]],[8182,8182],[8184,8184]]],[1520330270170,["Administrator@PNIN6EWFA74MMDR",[[-1,8183,"l"]],[8184,8184],[8183,8183]]],[1520330272424,["Administrator@PNIN6EWFA74MMDR",[[1,8183,"来判断"]],[8183,8183],[8186,8186]]]]]]}